name: release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: { }

permissions:
  contents: write

jobs:
  build:
    name: build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux (x86-64 GNU)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            bin_ext: ""
          # macOS (Apple Silicon default on GitHub hosted runners)
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
            bin_ext: ""
          # Windows (x86-64 MSVC)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
            bin_ext: ".exe"

    env:
      CARGO_TERM_COLOR: always
      BIN_NAME: steamclipconverter

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build (release)
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Prepare dist
        shell: bash
        run: |
          set -euxo pipefail
          TAG="${GITHUB_REF_NAME:-dev}"
          DIST="dist"
          NAME="${BIN_NAME}-${TAG}-${{ matrix.target }}"
          mkdir -p "$DIST/$NAME"
          # copy binary
          SRC="target/${{ matrix.target }}/release/${BIN_NAME}${{ matrix.bin_ext }}"
          cp "$SRC" "$DIST/$NAME/"
          # make sure *nix binaries are executable
          if [[ "${{ matrix.bin_ext }}" == "" ]]; then
            chmod +x "$DIST/$NAME/${BIN_NAME}"
          fi
          # include README/LICENCE if present
          [[ -f README.md ]] && cp README.md "$DIST/$NAME/"
          [[ -f LICENSE ]] && cp LICENSE "$DIST/$NAME/"

          # archive
          cd "$DIST"
          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            7z a -tzip "${NAME}.zip" "${NAME}" >/dev/null
          else
            tar -czf "${NAME}.tar.gz" "${NAME}"
          fi

          # checksums
          if command -v shasum >/dev/null 2>&1; then
            shasum -a 256 "${NAME}."* > "${NAME}.sha256"
          else
            sha256sum "${NAME}."* > "${NAME}.sha256"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.sha256
          if-no-files-found: error

  release:
    name: publish release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
